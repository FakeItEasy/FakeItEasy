<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FakeItEasy {
    using System;
    using System.Reflection;


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class ExceptionMessages {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ExceptionMessages() {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("FakeItEasy.ExceptionMessages", typeof(ExceptionMessages).GetTypeInfo().Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
<#
string resxPath = this.Host.ResolvePath("ExceptionMessages.resx");
var doc = XDocument.Load(resxPath);
foreach (var data in doc.Root.Elements("data"))
{
    // Only handle resources of type String (if type is not specified, it's a string)
    string type = data.Attribute("type")?.Value?.Split(',')?[0] ?? typeof(string).FullName;
    if (type != typeof(string).FullName)
        continue;

    // Skip resources with no name
    string name = data.Attribute("name")?.Value;
    if (string.IsNullOrEmpty(name))
        continue;

    string value = data.Element("value")?.Value ?? string.Empty;
#>

        /// <summary>
        ///   Looks up a localized string similar to <#= Truncate(value) #>
        /// </summary>
        internal static string <#= name #> {
            get {
                return ResourceManager.GetString("<#= name #>", resourceCulture);
            }
        }
<#
}
#>
    }
}
<#+
static string Truncate(string value)
{
    bool truncated = false;

    // Keep only the first line
    int endOfLine = value.IndexOfAny(new[] { '\r', '\n' });
    if (endOfLine >= 0)
    {
        value = value.Substring(0, endOfLine);
        truncated = true;
    }
    if (value.Length > 100)
    {
        value = value.Substring(0, 97);
        truncated = true;
    }
    if (truncated)
    {
        value += "...";
    }
    return value;
}
#>
