[assembly: System.CLSCompliantAttribute(true)]
[assembly: System.Resources.NeutralResourcesLanguageAttribute("en-US")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute(@"DynamicProxyGenAssembly2, PublicKey=0024000004800000940000000602000000240000525341310004000001000100c547cac37abd99c8db225ef2f6c8a3602f3b3606cc9891605d02baa56104f4cfc0734aa39b93bf7852f7d9266654753cc297e7d2edfe0bac1cdcf9f717241550e0a7b191195b7667bb4f64bcb8e2121380fd1d9d46ad2d92d2d15605093924cceaf74c4861eff62abf69b9291ed0a340e113be11e6a7d3113e92484cf7045cc7")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute(@"FakeItEasy.Extensions.ValueTask, PublicKey=00240000048000009400000006020000002400005253413100040000010001002f50d82092713be482c885861c984334606da0f54c78738a3dd0862fb2dfc6080f0780132cc65d88f0f0c70af74e8a53430962395bfc1a36fab08b7a2549d387e805c13cc84acd884447ec8c4dcfb6216df720f0998380f9c906b5de8141798d64661f036d47274e6ecb76c9cde5f4cf2b521040601e44b3914fbeb9f39127f9")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute(@"FakeItEasy.IntegrationTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001002f50d82092713be482c885861c984334606da0f54c78738a3dd0862fb2dfc6080f0780132cc65d88f0f0c70af74e8a53430962395bfc1a36fab08b7a2549d387e805c13cc84acd884447ec8c4dcfb6216df720f0998380f9c906b5de8141798d64661f036d47274e6ecb76c9cde5f4cf2b521040601e44b3914fbeb9f39127f9")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute(@"FakeItEasy.Tests, PublicKey=00240000048000009400000006020000002400005253413100040000010001002f50d82092713be482c885861c984334606da0f54c78738a3dd0862fb2dfc6080f0780132cc65d88f0f0c70af74e8a53430962395bfc1a36fab08b7a2549d387e805c13cc84acd884447ec8c4dcfb6216df720f0998380f9c906b5de8141798d64661f036d47274e6ecb76c9cde5f4cf2b521040601e44b3914fbeb9f39127f9")]
[assembly: System.Runtime.InteropServices.ComVisibleAttribute(false)]
[assembly: System.Runtime.Versioning.TargetFrameworkAttribute(".NETStandard,Version=v2.0", FrameworkDisplayName="")]
namespace FakeItEasy
{
    [System.Runtime.CompilerServices.NullableAttribute(0)]
    public class static A
    {
        public static FakeItEasy.Configuration.IVoidArgumentValidationConfiguration CallTo(System.Linq.Expressions.Expression<System.Action> callSpecification) { }
        public static FakeItEasy.Configuration.IAnyCallConfigurationWithNoReturnTypeSpecified CallTo(object fake) { }
        public static FakeItEasy.Configuration.IReturnValueArgumentValidationConfiguration<T> CallTo<[System.Runtime.CompilerServices.NullableAttribute(2)]  T>(System.Linq.Expressions.Expression<System.Func<T>> callSpecification) { }
        public static FakeItEasy.Configuration.IPropertySetterAnyValueConfiguration<TValue> CallToSet<[System.Runtime.CompilerServices.NullableAttribute(2)]  TValue>(System.Linq.Expressions.Expression<System.Func<TValue>> propertySpecification) { }
        public static System.Collections.Generic.IList<T> CollectionOfDummy<[System.Runtime.CompilerServices.NullableAttribute(2)]  T>(int numberOfDummies) { }
        public static System.Collections.Generic.IList<T> CollectionOfFake<T>(int numberOfFakes)
            where T :  class { }
        public static System.Collections.Generic.IList<T> CollectionOfFake<T>(int numberOfFakes, System.Action<FakeItEasy.Creation.IFakeOptions<T>> optionsBuilder)
            where T :  class { }
        public static T Dummy<[System.Runtime.CompilerServices.NullableAttribute(2)]  T>() { }
        public static T Fake<T>()
            where T :  class { }
        public static T Fake<T>(System.Action<FakeItEasy.Creation.IFakeOptions<T>> optionsBuilder)
            where T :  class { }
    }
    [System.Runtime.CompilerServices.NullableAttribute(0)]
    public class static A<[System.Runtime.CompilerServices.NullableAttribute(2)]  T>
    {
        public static T Ignored { get; }
        public static FakeItEasy.INegatableArgumentConstraintManager<T> That { get; }
        [System.CLSCompliantAttribute(false)]
        public static T _ { get; }
    }
    [System.Runtime.CompilerServices.NullableAttribute(0)]
    public class static ArgumentConstraintManagerExtensions
    {
        public static string Contains(this FakeItEasy.IArgumentConstraintManager<string> manager, string value) { }
        public static T Contains<[System.Runtime.CompilerServices.NullableAttribute(0)]  T>(this FakeItEasy.IArgumentConstraintManager<T> manager, [System.Runtime.CompilerServices.NullableAttribute(2)] object value)
            where T : System.Collections.IEnumerable { }
        public static string EndsWith(this FakeItEasy.IArgumentConstraintManager<string> manager, string value) { }
        public static System.Threading.CancellationToken IsCanceled(this FakeItEasy.IArgumentConstraintManager<System.Threading.CancellationToken> manager) { }
        public static T IsEmpty<[System.Runtime.CompilerServices.NullableAttribute(0)]  T>(this FakeItEasy.IArgumentConstraintManager<T> manager)
            where T : System.Collections.IEnumerable { }
        public static T IsEqualTo<[System.Runtime.CompilerServices.NullableAttribute(2)]  T>(this FakeItEasy.IArgumentConstraintManager<T> manager, T value) { }
        public static T IsGreaterThan<[System.Runtime.CompilerServices.NullableAttribute(0)]  T>(this FakeItEasy.IArgumentConstraintManager<T> manager, T value)
            where T : System.IComparable { }
        public static T IsInstanceOf<[System.Runtime.CompilerServices.NullableAttribute(2)]  T>(this FakeItEasy.IArgumentConstraintManager<T> manager, System.Type type) { }
        public static System.Threading.CancellationToken IsNotCanceled(this FakeItEasy.INegatableArgumentConstraintManager<System.Threading.CancellationToken> manager) { }
        public static T IsNotNull<T>(this FakeItEasy.INegatableArgumentConstraintManager<T> manager)
            where T :  class { }
        public static System.Nullable<T> IsNotNull<T>([System.Runtime.CompilerServices.NullableAttribute(new byte[] {
                1,
                0})] this FakeItEasy.INegatableArgumentConstraintManager<System.Nullable<T>> manager)
            where T :  struct { }
        public static T IsNull<T>(this FakeItEasy.IArgumentConstraintManager<T> manager)
            where T :  class { }
        public static System.Nullable<T> IsNull<T>([System.Runtime.CompilerServices.NullableAttribute(new byte[] {
                1,
                0})] this FakeItEasy.IArgumentConstraintManager<System.Nullable<T>> manager)
            where T :  struct { }
        public static string IsNullOrEmpty(this FakeItEasy.IArgumentConstraintManager<string> manager) { }
        public static T IsSameAs<[System.Runtime.CompilerServices.NullableAttribute(2)]  T>(this FakeItEasy.IArgumentConstraintManager<T> manager, T value) { }
        public static T IsSameSequenceAs<[System.Runtime.CompilerServices.NullableAttribute(0)]  T>(this FakeItEasy.IArgumentConstraintManager<T> manager, System.Collections.IEnumerable values)
            where T : System.Collections.IEnumerable { }
        public static T IsSameSequenceAs<[System.Runtime.CompilerServices.NullableAttribute(0)]  T>(this FakeItEasy.IArgumentConstraintManager<T> manager, [System.Runtime.CompilerServices.NullableAttribute(new byte[] {
                1,
                2})] params object[] values)
            where T : System.Collections.IEnumerable { }
        public static T Matches<[System.Runtime.CompilerServices.NullableAttribute(2)]  T>(this FakeItEasy.IArgumentConstraintManager<T> manager, System.Func<T, bool> predicate, string description) { }
        public static T Matches<[System.Runtime.CompilerServices.NullableAttribute(2)]  T>(this FakeItEasy.IArgumentConstraintManager<T> manager, System.Func<T, bool> predicate, string descriptionFormat, [System.Runtime.CompilerServices.NullableAttribute(new byte[] {
                1,
                2})] params object[] args) { }
        public static T Matches<[System.Runtime.CompilerServices.NullableAttribute(2)]  T>(this FakeItEasy.IArgumentConstraintManager<T> manager, System.Linq.Expressions.Expression<System.Func<T, bool>> predicate) { }
        public static T NullCheckedMatches<[System.Runtime.CompilerServices.NullableAttribute(2)]  T>(this FakeItEasy.IArgumentConstraintManager<T> manager, System.Func<T, bool> predicate, System.Action<FakeItEasy.IOutputWriter> descriptionWriter) { }
        public static string StartsWith(this FakeItEasy.IArgumentConstraintManager<string> manager, string value) { }
    }
    public class static ArgumentValidationConfigurationExtensions
    {
        public static TInterface WhenArgumentsMatch<TInterface, T1>(this FakeItEasy.Configuration.IArgumentValidationConfiguration<TInterface> configuration, System.Func<T1, bool> argumentsPredicate) { }
        public static TInterface WhenArgumentsMatch<TInterface, T1, T2>(this FakeItEasy.Configuration.IArgumentValidationConfiguration<TInterface> configuration, System.Func<T1, T2, bool> argumentsPredicate) { }
        public static TInterface WhenArgumentsMatch<TInterface, T1, T2, T3>(this FakeItEasy.Configuration.IArgumentValidationConfiguration<TInterface> configuration, System.Func<T1, T2, T3, bool> argumentsPredicate) { }
        public static TInterface WhenArgumentsMatch<TInterface, T1, T2, T3, T4>(this FakeItEasy.Configuration.IArgumentValidationConfiguration<TInterface> configuration, System.Func<T1, T2, T3, T4, bool> argumentsPredicate) { }
        public static TInterface WhenArgumentsMatch<TInterface, T1, T2, T3, T4, T5>(this FakeItEasy.Configuration.IArgumentValidationConfiguration<TInterface> configuration, System.Func<T1, T2, T3, T4, T5, bool> argumentsPredicate) { }
        public static TInterface WhenArgumentsMatch<TInterface, T1, T2, T3, T4, T5, T6>(this FakeItEasy.Configuration.IArgumentValidationConfiguration<TInterface> configuration, System.Func<T1, T2, T3, T4, T5, T6, bool> argumentsPredicate) { }
        public static TInterface WhenArgumentsMatch<TInterface, T1, T2, T3, T4, T5, T6, T7>(this FakeItEasy.Configuration.IArgumentValidationConfiguration<TInterface> configuration, System.Func<T1, T2, T3, T4, T5, T6, T7, bool> argumentsPredicate) { }
        public static TInterface WhenArgumentsMatch<TInterface, T1, T2, T3, T4, T5, T6, T7, T8>(this FakeItEasy.Configuration.IArgumentValidationConfiguration<TInterface> configuration, System.Func<T1, T2, T3, T4, T5, T6, T7, T8, bool> argumentsPredicate) { }
        public static TInterface WithAnyArguments<[System.Runtime.CompilerServices.NullableAttribute(2)]  TInterface>(this FakeItEasy.Configuration.IArgumentValidationConfiguration<TInterface> configuration) { }
    }
    [System.Runtime.CompilerServices.NullableAttribute(0)]
    public abstract class ArgumentValueFormatter<[System.Runtime.CompilerServices.NullableAttribute(2)]  T> : FakeItEasy.IArgumentValueFormatter
    {
        protected ArgumentValueFormatter() { }
        public System.Type ForType { get; }
        public virtual FakeItEasy.Priority Priority { get; }
        public string GetArgumentValueAsString(object argumentValue) { }
        protected abstract string GetStringValue(T argumentValue);
    }
    [System.Runtime.CompilerServices.NullableAttribute(0)]
    public class static AssertConfigurationExtensions
    {
        public static FakeItEasy.Configuration.UnorderedCallAssertion MustHaveHappened(this FakeItEasy.Configuration.IAssertConfiguration configuration) { }
        public static FakeItEasy.Configuration.UnorderedCallAssertion MustHaveHappenedOnceExactly(this FakeItEasy.Configuration.IAssertConfiguration configuration) { }
        public static FakeItEasy.Configuration.UnorderedCallAssertion MustHaveHappenedOnceOrLess(this FakeItEasy.Configuration.IAssertConfiguration configuration) { }
        public static FakeItEasy.Configuration.UnorderedCallAssertion MustHaveHappenedOnceOrMore(this FakeItEasy.Configuration.IAssertConfiguration configuration) { }
        public static FakeItEasy.Configuration.UnorderedCallAssertion MustHaveHappenedTwiceExactly(this FakeItEasy.Configuration.IAssertConfiguration configuration) { }
        public static FakeItEasy.Configuration.UnorderedCallAssertion MustHaveHappenedTwiceOrLess(this FakeItEasy.Configuration.IAssertConfiguration configuration) { }
        public static FakeItEasy.Configuration.UnorderedCallAssertion MustHaveHappenedTwiceOrMore(this FakeItEasy.Configuration.IAssertConfiguration configuration) { }
        public static void MustNotHaveHappened(this FakeItEasy.Configuration.IAssertConfiguration configuration) { }
    }
    public class static AsyncReturnValueConfigurationExtensions
    {
        public static FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task>> ThrowsAsync(this FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task> configuration, System.Exception exception) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task>> ThrowsAsync(this FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task> configuration, System.Func<FakeItEasy.Core.IFakeObjectCall, System.Exception> exceptionFactory) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task>> ThrowsAsync(this FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task> configuration, System.Func<System.Exception> exceptionFactory) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<T>>> ThrowsAsync<[System.Runtime.CompilerServices.NullableAttribute(2)]  T>(this FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<T>> configuration, System.Exception exception) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<T>>> ThrowsAsync<[System.Runtime.CompilerServices.NullableAttribute(2)]  T>(this FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<T>> configuration, System.Func<FakeItEasy.Core.IFakeObjectCall, System.Exception> exceptionFactory) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<T>>> ThrowsAsync<[System.Runtime.CompilerServices.NullableAttribute(2)]  T>(this FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<T>> configuration, System.Func<System.Exception> exceptionFactory) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task>> ThrowsAsync<T1>(this FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task> configuration, System.Func<T1, System.Exception> exceptionFactory) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<T>>> ThrowsAsync<T, T1>(this FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<T>> configuration, System.Func<T1, System.Exception> exceptionFactory) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task>> ThrowsAsync<T1, T2>(this FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task> configuration, System.Func<T1, T2, System.Exception> exceptionFactory) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<T>>> ThrowsAsync<T, T1, T2>(this FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<T>> configuration, System.Func<T1, T2, System.Exception> exceptionFactory) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task>> ThrowsAsync<T1, T2, T3>(this FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task> configuration, System.Func<T1, T2, T3, System.Exception> exceptionFactory) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<T>>> ThrowsAsync<T, T1, T2, T3>(this FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<T>> configuration, System.Func<T1, T2, T3, System.Exception> exceptionFactory) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task>> ThrowsAsync<T1, T2, T3, T4>(this FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task> configuration, System.Func<T1, T2, T3, T4, System.Exception> exceptionFactory) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<T>>> ThrowsAsync<T, T1, T2, T3, T4>(this FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<T>> configuration, System.Func<T1, T2, T3, T4, System.Exception> exceptionFactory) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task>> ThrowsAsync<T1, T2, T3, T4, T5>(this FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task> configuration, System.Func<T1, T2, T3, T4, T5, System.Exception> exceptionFactory) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<T>>> ThrowsAsync<T, T1, T2, T3, T4, T5>(this FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<T>> configuration, System.Func<T1, T2, T3, T4, T5, System.Exception> exceptionFactory) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task>> ThrowsAsync<T1, T2, T3, T4, T5, T6>(this FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task> configuration, System.Func<T1, T2, T3, T4, T5, T6, System.Exception> exceptionFactory) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<T>>> ThrowsAsync<T, T1, T2, T3, T4, T5, T6>(this FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<T>> configuration, System.Func<T1, T2, T3, T4, T5, T6, System.Exception> exceptionFactory) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task>> ThrowsAsync<T1, T2, T3, T4, T5, T6, T7>(this FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task> configuration, System.Func<T1, T2, T3, T4, T5, T6, T7, System.Exception> exceptionFactory) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<T>>> ThrowsAsync<T, T1, T2, T3, T4, T5, T6, T7>(this FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<T>> configuration, System.Func<T1, T2, T3, T4, T5, T6, T7, System.Exception> exceptionFactory) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task>> ThrowsAsync<T1, T2, T3, T4, T5, T6, T7, T8>(this FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task> configuration, System.Func<T1, T2, T3, T4, T5, T6, T7, T8, System.Exception> exceptionFactory) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<T>>> ThrowsAsync<T, T1, T2, T3, T4, T5, T6, T7, T8>(this FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<T>> configuration, System.Func<T1, T2, T3, T4, T5, T6, T7, T8, System.Exception> exceptionFactory) { }
    }
    [System.Runtime.CompilerServices.NullableAttribute(0)]
    public class static BehaviorLifetimeConfigurationExtensions
    {
        public static FakeItEasy.Configuration.IThenConfiguration<TInterface> Once<[System.Runtime.CompilerServices.NullableAttribute(2)]  TInterface>(this FakeItEasy.Configuration.IBehaviorLifetimeConfiguration<TInterface> configuration) { }
        public static FakeItEasy.Configuration.IThenConfiguration<TInterface> Twice<[System.Runtime.CompilerServices.NullableAttribute(2)]  TInterface>(this FakeItEasy.Configuration.IBehaviorLifetimeConfiguration<TInterface> configuration) { }
    }
    public class static CallbackConfigurationExtensions
    {
        public static TInterface Invokes<[System.Runtime.CompilerServices.NullableAttribute(2)]  TInterface>(this FakeItEasy.Configuration.ICallbackConfiguration<TInterface> configuration, System.Action actionToInvoke) { }
        public static TInterface Invokes<TInterface, T1>(this FakeItEasy.Configuration.ICallbackConfiguration<TInterface> configuration, System.Action<T1> actionToInvoke) { }
        public static TInterface Invokes<TInterface, T1, T2>(this FakeItEasy.Configuration.ICallbackConfiguration<TInterface> configuration, System.Action<T1, T2> actionToInvoke) { }
        public static TInterface Invokes<TInterface, T1, T2, T3>(this FakeItEasy.Configuration.ICallbackConfiguration<TInterface> configuration, System.Action<T1, T2, T3> actionToInvoke) { }
        public static TInterface Invokes<TInterface, T1, T2, T3, T4>(this FakeItEasy.Configuration.ICallbackConfiguration<TInterface> configuration, System.Action<T1, T2, T3, T4> actionToInvoke) { }
        public static TInterface Invokes<TInterface, T1, T2, T3, T4, T5>(this FakeItEasy.Configuration.ICallbackConfiguration<TInterface> configuration, System.Action<T1, T2, T3, T4, T5> actionToInvoke) { }
        public static TInterface Invokes<TInterface, T1, T2, T3, T4, T5, T6>(this FakeItEasy.Configuration.ICallbackConfiguration<TInterface> configuration, System.Action<T1, T2, T3, T4, T5, T6> actionToInvoke) { }
        public static TInterface Invokes<TInterface, T1, T2, T3, T4, T5, T6, T7>(this FakeItEasy.Configuration.ICallbackConfiguration<TInterface> configuration, System.Action<T1, T2, T3, T4, T5, T6, T7> actionToInvoke) { }
        public static TInterface Invokes<TInterface, T1, T2, T3, T4, T5, T6, T7, T8>(this FakeItEasy.Configuration.ICallbackConfiguration<TInterface> configuration, System.Action<T1, T2, T3, T4, T5, T6, T7, T8> actionToInvoke) { }
    }
    public class static CompletedFakeObjectCallExtensions
    {
        public static System.Collections.Generic.IEnumerable<FakeItEasy.Core.ICompletedFakeObjectCall> Matching<[System.Runtime.CompilerServices.NullableAttribute(2)]  TFake>(this System.Collections.Generic.IEnumerable<FakeItEasy.Core.ICompletedFakeObjectCall> calls, System.Linq.Expressions.Expression<System.Action<TFake>> callSpecification) { }
    }
    public class DefaultBootstrapper : FakeItEasy.IBootstrapper
    {
        public DefaultBootstrapper() { }
        public virtual System.Collections.Generic.IEnumerable<string> GetAssemblyFileNamesToScanForExtensions() { }
    }
    [System.Runtime.CompilerServices.NullableAttribute(0)]
    public abstract class DummyFactory<[System.Runtime.CompilerServices.NullableAttribute(2)]  T> : FakeItEasy.IDummyFactory
    {
        protected DummyFactory() { }
        public virtual FakeItEasy.Priority Priority { get; }
        public bool CanCreate(System.Type type) { }
        [return: System.Runtime.CompilerServices.NullableAttribute(2)]
        public object Create(System.Type type) { }
        protected abstract T Create();
    }
    [System.Runtime.CompilerServices.NullableAttribute(0)]
    public class static ExceptionThrowerConfigurationExtensions
    {
        public static FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<TInterface> Throws<[System.Runtime.CompilerServices.NullableAttribute(2)]  TInterface>(this FakeItEasy.Configuration.IExceptionThrowerConfiguration<TInterface> configuration, System.Exception exception) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<TInterface> Throws<[System.Runtime.CompilerServices.NullableAttribute(2)]  TInterface>(this FakeItEasy.Configuration.IExceptionThrowerConfiguration<TInterface> configuration, System.Func<System.Exception> exceptionFactory) { }
    }
    [System.Runtime.CompilerServices.NullableAttribute(0)]
    public class ExpectationException : System.Exception
    {
        public ExpectationException() { }
        public ExpectationException(string message) { }
        public ExpectationException(string message, System.Exception innerException) { }
    }
    [System.Runtime.CompilerServices.NullableAttribute(0)]
    public class static Fake
    {
        public static void ClearConfiguration(object fakedObject) { }
        public static void ClearRecordedCalls(object fakedObject) { }
        public static System.Collections.Generic.IEnumerable<FakeItEasy.Core.ICompletedFakeObjectCall> GetCalls(object fakedObject) { }
        public static FakeItEasy.Core.FakeManager GetFakeManager(object fakedObject) { }
        public static bool IsFake(object potentialFake) { }
        public static bool TryGetFakeManager(object potentialFake, [System.Runtime.CompilerServices.NullableAttribute(2)] out FakeItEasy.Core.FakeManager fakeManager) { }
    }
    [System.Runtime.CompilerServices.NullableAttribute(0)]
    public class static FakeObjectCallExtensions
    {
        public static T GetArgument<[System.Runtime.CompilerServices.NullableAttribute(2)]  T>(this FakeItEasy.Core.IFakeObjectCall call, int argumentIndex) { }
        public static T GetArgument<[System.Runtime.CompilerServices.NullableAttribute(2)]  T>(this FakeItEasy.Core.IFakeObjectCall call, string argumentName) { }
    }
    [System.Runtime.CompilerServices.NullableAttribute(0)]
    public abstract class FakeOptionsBuilder<TFake> : FakeItEasy.IFakeOptionsBuilder
        where TFake :  class
    {
        protected FakeOptionsBuilder() { }
        public virtual FakeItEasy.Priority Priority { get; }
        protected abstract void BuildOptions(FakeItEasy.Creation.IFakeOptions<TFake> options);
    }
    [System.Runtime.CompilerServices.NullableAttribute(0)]
    public class static FakeOptionsExtensions
    {
        public static FakeItEasy.Creation.IFakeOptions<T> CallsBaseMethods<T>(this FakeItEasy.Creation.IFakeOptions<T> options)
            where T :  class { }
        public static FakeItEasy.Creation.IFakeOptions CallsBaseMethods(this FakeItEasy.Creation.IFakeOptions options) { }
        public static FakeItEasy.Creation.IFakeOptions<T> Strict<T>(this FakeItEasy.Creation.IFakeOptions<T> options)
            where T :  class { }
        public static FakeItEasy.Creation.IFakeOptions Strict(this FakeItEasy.Creation.IFakeOptions options) { }
    }
    [System.Runtime.CompilerServices.NullableAttribute(0)]
    public class Fake<T> : FakeItEasy.IHideObjectMembers
        where T :  class
    {
        public Fake() { }
        public Fake(System.Action<FakeItEasy.Creation.IFakeOptions<T>> optionsBuilder) { }
        public T FakedObject { get; }
        public System.Collections.Generic.IEnumerable<FakeItEasy.Core.ICompletedFakeObjectCall> RecordedCalls { get; }
        public FakeItEasy.Configuration.IAnyCallConfigurationWithNoReturnTypeSpecified AnyCall() { }
        public FakeItEasy.Configuration.IVoidArgumentValidationConfiguration CallsTo(System.Linq.Expressions.Expression<System.Action<T>> callSpecification) { }
        public FakeItEasy.Configuration.IReturnValueArgumentValidationConfiguration<TMember> CallsTo<[System.Runtime.CompilerServices.NullableAttribute(2)]  TMember>(System.Linq.Expressions.Expression<System.Func<T, TMember>> callSpecification) { }
        public FakeItEasy.Configuration.IPropertySetterAnyValueConfiguration<TValue> CallsToSet<[System.Runtime.CompilerServices.NullableAttribute(2)]  TValue>(System.Linq.Expressions.Expression<System.Func<T, TValue>> propertySpecification) { }
    }
    public interface IArgumentConstraintManager<[System.Runtime.CompilerServices.NullableAttribute(2)]  T> : FakeItEasy.IHideObjectMembers
    {
        T Matches(System.Func<T, bool> predicate, System.Action<FakeItEasy.IOutputWriter> descriptionWriter);
    }
    public interface IArgumentValueFormatter
    {
        System.Type ForType { get; }
        FakeItEasy.Priority Priority { get; }
        string GetArgumentValueAsString(object argumentValue);
    }
    public interface IBootstrapper
    {
        System.Collections.Generic.IEnumerable<string> GetAssemblyFileNamesToScanForExtensions();
    }
    public interface IDummyFactory
    {
        FakeItEasy.Priority Priority { get; }
        bool CanCreate(System.Type type);
        [return: System.Runtime.CompilerServices.NullableAttribute(2)]
        object Create(System.Type type);
    }
    public interface IFakeOptionsBuilder
    {
        FakeItEasy.Priority Priority { get; }
        void BuildOptions(System.Type typeOfFake, FakeItEasy.Creation.IFakeOptions options);
        bool CanBuildOptionsForFakeOfType(System.Type type);
    }
    public interface IHideObjectMembers
    {
        bool Equals(object o);
        int GetHashCode();
        System.Type GetType();
        string ToString();
    }
    public interface INegatableArgumentConstraintManager<[System.Runtime.CompilerServices.NullableAttribute(2)]  T> : FakeItEasy.IArgumentConstraintManager<T>, FakeItEasy.IHideObjectMembers
    {
        FakeItEasy.IArgumentConstraintManager<T> Not { get; }
    }
    public interface IOutputWriter : FakeItEasy.IHideObjectMembers
    {
        System.IDisposable Indent();
        FakeItEasy.IOutputWriter Write(string value);
        FakeItEasy.IOutputWriter WriteArgumentValue([System.Runtime.CompilerServices.NullableAttribute(2)] object value);
    }
    public class static OutAndRefParametersConfigurationExtensions
    {
        public static FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<TInterface> AssignsOutAndRefParameters<[System.Runtime.CompilerServices.NullableAttribute(2)]  TInterface>(this FakeItEasy.Configuration.IOutAndRefParametersConfiguration<TInterface> configuration, [System.Runtime.CompilerServices.NullableAttribute(new byte[] {
                1,
                2})] params object[] values) { }
    }
    [System.Runtime.CompilerServices.NullableAttribute(0)]
    public class static OutputWriterExtensions
    {
        public static FakeItEasy.IOutputWriter Write(this FakeItEasy.IOutputWriter writer, string format, [System.Runtime.CompilerServices.NullableAttribute(new byte[] {
                1,
                2})] params object[] args) { }
        public static FakeItEasy.IOutputWriter Write(this FakeItEasy.IOutputWriter writer, object value) { }
        public static FakeItEasy.IOutputWriter WriteLine(this FakeItEasy.IOutputWriter writer) { }
    }
    public struct Priority : System.IComparable<FakeItEasy.Priority>, System.IEquatable<FakeItEasy.Priority>
    {
        public Priority(byte value) { }
        public static FakeItEasy.Priority Default { get; }
        public int CompareTo(FakeItEasy.Priority other) { }
        public bool Equals(FakeItEasy.Priority other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static bool ==(FakeItEasy.Priority left, FakeItEasy.Priority right) { }
        public static bool >(FakeItEasy.Priority left, FakeItEasy.Priority right) { }
        public static bool >=(FakeItEasy.Priority left, FakeItEasy.Priority right) { }
        public static bool !=(FakeItEasy.Priority left, FakeItEasy.Priority right) { }
        public static bool <(FakeItEasy.Priority left, FakeItEasy.Priority right) { }
        public static bool <=(FakeItEasy.Priority left, FakeItEasy.Priority right) { }
    }
    [System.Runtime.CompilerServices.NullableAttribute(0)]
    public class static Raise
    {
        public static FakeItEasy.Core.Raise<TEventArgs> With<[System.Runtime.CompilerServices.NullableAttribute(2)]  TEventArgs>([System.Runtime.CompilerServices.NullableAttribute(2)] object sender, TEventArgs e) { }
        public static FakeItEasy.Core.Raise<TEventArgs> With<[System.Runtime.CompilerServices.NullableAttribute(2)]  TEventArgs>(TEventArgs e) { }
        public static FakeItEasy.Core.Raise<System.EventArgs> WithEmpty() { }
        public class static FreeForm
        {
            [return: System.Runtime.CompilerServices.DynamicAttribute()]
            public static object With([System.Runtime.CompilerServices.NullableAttribute(new byte[] {
                    1,
                    2})] params object[] arguments) { }
        }
        public class static FreeForm<TEventHandler>
            where TEventHandler : System.Delegate
        {
            public static TEventHandler With([System.Runtime.CompilerServices.NullableAttribute(new byte[] {
                    1,
                    2})] params object[] arguments) { }
        }
    }
    public class static ReturnValueConfigurationExtensions
    {
        public static FakeItEasy.Configuration.IAfterCallConfiguredWithOutAndRefParametersConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<T>> Returns<[System.Runtime.CompilerServices.NullableAttribute(2)]  T>(this FakeItEasy.Configuration.IReturnValueConfiguration<T> configuration, T value) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredWithOutAndRefParametersConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<T>>> Returns<[System.Runtime.CompilerServices.NullableAttribute(2)]  T>(this FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<T>> configuration, T value) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredWithOutAndRefParametersConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<T>> ReturnsLazily<[System.Runtime.CompilerServices.NullableAttribute(2)]  T>(this FakeItEasy.Configuration.IReturnValueConfiguration<T> configuration, System.Func<T> valueProducer) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredWithOutAndRefParametersConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<T>>> ReturnsLazily<[System.Runtime.CompilerServices.NullableAttribute(2)]  T>(this FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<T>> configuration, System.Func<T> valueProducer) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredWithOutAndRefParametersConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<TReturnType>> ReturnsLazily<TReturnType, T1>(this FakeItEasy.Configuration.IReturnValueConfiguration<TReturnType> configuration, System.Func<T1, TReturnType> valueProducer) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredWithOutAndRefParametersConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<TReturnType>>> ReturnsLazily<TReturnType, T1>(this FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<TReturnType>> configuration, System.Func<T1, TReturnType> valueProducer) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredWithOutAndRefParametersConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<TReturnType>> ReturnsLazily<TReturnType, T1, T2>(this FakeItEasy.Configuration.IReturnValueConfiguration<TReturnType> configuration, System.Func<T1, T2, TReturnType> valueProducer) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredWithOutAndRefParametersConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<TReturnType>>> ReturnsLazily<TReturnType, T1, T2>(this FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<TReturnType>> configuration, System.Func<T1, T2, TReturnType> valueProducer) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredWithOutAndRefParametersConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<TReturnType>> ReturnsLazily<TReturnType, T1, T2, T3>(this FakeItEasy.Configuration.IReturnValueConfiguration<TReturnType> configuration, System.Func<T1, T2, T3, TReturnType> valueProducer) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredWithOutAndRefParametersConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<TReturnType>>> ReturnsLazily<TReturnType, T1, T2, T3>(this FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<TReturnType>> configuration, System.Func<T1, T2, T3, TReturnType> valueProducer) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredWithOutAndRefParametersConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<TReturnType>> ReturnsLazily<TReturnType, T1, T2, T3, T4>(this FakeItEasy.Configuration.IReturnValueConfiguration<TReturnType> configuration, System.Func<T1, T2, T3, T4, TReturnType> valueProducer) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredWithOutAndRefParametersConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<TReturnType>>> ReturnsLazily<TReturnType, T1, T2, T3, T4>(this FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<TReturnType>> configuration, System.Func<T1, T2, T3, T4, TReturnType> valueProducer) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredWithOutAndRefParametersConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<TReturnType>> ReturnsLazily<TReturnType, T1, T2, T3, T4, T5>(this FakeItEasy.Configuration.IReturnValueConfiguration<TReturnType> configuration, System.Func<T1, T2, T3, T4, T5, TReturnType> valueProducer) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredWithOutAndRefParametersConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<TReturnType>>> ReturnsLazily<TReturnType, T1, T2, T3, T4, T5>(this FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<TReturnType>> configuration, System.Func<T1, T2, T3, T4, T5, TReturnType> valueProducer) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredWithOutAndRefParametersConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<TReturnType>> ReturnsLazily<TReturnType, T1, T2, T3, T4, T5, T6>(this FakeItEasy.Configuration.IReturnValueConfiguration<TReturnType> configuration, System.Func<T1, T2, T3, T4, T5, T6, TReturnType> valueProducer) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredWithOutAndRefParametersConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<TReturnType>>> ReturnsLazily<TReturnType, T1, T2, T3, T4, T5, T6>(this FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<TReturnType>> configuration, System.Func<T1, T2, T3, T4, T5, T6, TReturnType> valueProducer) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredWithOutAndRefParametersConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<TReturnType>> ReturnsLazily<TReturnType, T1, T2, T3, T4, T5, T6, T7>(this FakeItEasy.Configuration.IReturnValueConfiguration<TReturnType> configuration, System.Func<T1, T2, T3, T4, T5, T6, T7, TReturnType> valueProducer) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredWithOutAndRefParametersConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<TReturnType>>> ReturnsLazily<TReturnType, T1, T2, T3, T4, T5, T6, T7>(this FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<TReturnType>> configuration, System.Func<T1, T2, T3, T4, T5, T6, T7, TReturnType> valueProducer) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredWithOutAndRefParametersConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<TReturnType>> ReturnsLazily<TReturnType, T1, T2, T3, T4, T5, T6, T7, T8>(this FakeItEasy.Configuration.IReturnValueConfiguration<TReturnType> configuration, System.Func<T1, T2, T3, T4, T5, T6, T7, T8, TReturnType> valueProducer) { }
        public static FakeItEasy.Configuration.IAfterCallConfiguredWithOutAndRefParametersConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<TReturnType>>> ReturnsLazily<TReturnType, T1, T2, T3, T4, T5, T6, T7, T8>(this FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<TReturnType>> configuration, System.Func<T1, T2, T3, T4, T5, T6, T7, T8, TReturnType> valueProducer) { }
        public static void ReturnsNextFromSequence<[System.Runtime.CompilerServices.NullableAttribute(2)]  T>(this FakeItEasy.Configuration.IReturnValueConfiguration<T> configuration, params T[] values) { }
        public static void ReturnsNextFromSequence<[System.Runtime.CompilerServices.NullableAttribute(2)]  T>(this FakeItEasy.Configuration.IReturnValueConfiguration<System.Threading.Tasks.Task<T>> configuration, params T[] values) { }
    }
    [System.Runtime.CompilerServices.NullableAttribute(0)]
    public abstract class Times
    {
        public static FakeItEasy.Times Exactly { get; }
        public static FakeItEasy.Times OrLess { get; }
        public static FakeItEasy.Times OrMore { get; }
    }
    [System.Runtime.CompilerServices.NullableAttribute(0)]
    public class UserCallbackException : System.Exception
    {
        public UserCallbackException() { }
        public UserCallbackException(string message) { }
        public UserCallbackException(string message, System.Exception innerException) { }
    }
    public class static WhereConfigurationExtensions
    {
        public static T Where<[System.Runtime.CompilerServices.NullableAttribute(2)]  T>(this FakeItEasy.Configuration.IWhereConfiguration<T> configuration, System.Linq.Expressions.Expression<System.Func<FakeItEasy.Core.IFakeObjectCall, bool>> predicate) { }
    }
}
namespace FakeItEasy.Configuration
{
    [System.Runtime.CompilerServices.NullableAttribute(0)]
    public class ArgumentCollection : System.Collections.Generic.IEnumerable<object>, System.Collections.IEnumerable
    {
        public System.Collections.Generic.IEnumerable<string> ArgumentNames { get; }
        public int Count { get; }
        [System.Runtime.CompilerServices.NullableAttribute(2)]
        public object this[int argumentIndex] { get; }
        public T Get<[System.Runtime.CompilerServices.NullableAttribute(2)]  T>(int index) { }
        public T Get<[System.Runtime.CompilerServices.NullableAttribute(2)]  T>(string argumentName) { }
        [return: System.Runtime.CompilerServices.NullableAttribute(new byte[] {
                1,
                2})]
        public System.Collections.Generic.IEnumerator<object> GetEnumerator() { }
    }
    [System.Runtime.CompilerServices.NullableAttribute(0)]
    public class FakeConfigurationException : System.Exception
    {
        public FakeConfigurationException() { }
        public FakeConfigurationException(string message) { }
        public FakeConfigurationException(string message, System.Exception innerException) { }
    }
    public interface IAfterCallConfiguredConfiguration<[System.Runtime.CompilerServices.NullableAttribute(2)]  out TInterface> : FakeItEasy.Configuration.IBehaviorLifetimeConfiguration<TInterface>, FakeItEasy.IHideObjectMembers { }
    public interface IAfterCallConfiguredWithOutAndRefParametersConfiguration<[System.Runtime.CompilerServices.NullableAttribute(2)]  out TInterface> : FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<TInterface>, FakeItEasy.Configuration.IBehaviorLifetimeConfiguration<TInterface>, FakeItEasy.Configuration.IOutAndRefParametersConfiguration<TInterface>, FakeItEasy.IHideObjectMembers { }
    public interface IAnyCallConfigurationWithNoReturnTypeSpecified : FakeItEasy.Configuration.IArgumentValidationConfiguration<FakeItEasy.Configuration.IVoidConfiguration>, FakeItEasy.Configuration.IAssertConfiguration, FakeItEasy.Configuration.ICallBaseConfiguration<FakeItEasy.Configuration.IVoidConfiguration>, FakeItEasy.Configuration.ICallbackConfiguration<FakeItEasy.Configuration.IVoidConfiguration>, FakeItEasy.Configuration.IDoNothingConfiguration<FakeItEasy.Configuration.IVoidConfiguration>, FakeItEasy.Configuration.IExceptionThrowerConfiguration<FakeItEasy.Configuration.IVoidConfiguration>, FakeItEasy.Configuration.IOutAndRefParametersConfiguration<FakeItEasy.Configuration.IVoidConfiguration>, FakeItEasy.Configuration.IVoidArgumentValidationConfiguration, FakeItEasy.Configuration.IVoidConfiguration, FakeItEasy.Configuration.IWhereConfiguration<FakeItEasy.Configuration.IAnyCallConfigurationWithNoReturnTypeSpecified>, FakeItEasy.IHideObjectMembers
    {
        [return: System.Runtime.CompilerServices.NullableAttribute(new byte[] {
                1,
                2})]
        FakeItEasy.Configuration.IAnyCallConfigurationWithReturnTypeSpecified<object> WithNonVoidReturnType();
        FakeItEasy.Configuration.IAnyCallConfigurationWithReturnTypeSpecified<TMember> WithReturnType<[System.Runtime.CompilerServices.NullableAttribute(2)]  TMember>();
        FakeItEasy.Configuration.IAnyCallConfigurationWithVoidReturnType WithVoidReturnType();
    }
    public interface IAnyCallConfigurationWithReturnTypeSpecified<[System.Runtime.CompilerServices.NullableAttribute(2)]  T> : FakeItEasy.Configuration.IArgumentValidationConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<T>>, FakeItEasy.Configuration.IAssertConfiguration, FakeItEasy.Configuration.ICallBaseConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<T>>, FakeItEasy.Configuration.ICallbackConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<T>>, FakeItEasy.Configuration.IExceptionThrowerConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<T>>, FakeItEasy.Configuration.IOutAndRefParametersConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<T>>, FakeItEasy.Configuration.IReturnValueArgumentValidationConfiguration<T>, FakeItEasy.Configuration.IReturnValueConfiguration<T>, FakeItEasy.Configuration.IWhereConfiguration<FakeItEasy.Configuration.IAnyCallConfigurationWithReturnTypeSpecified<T>>, FakeItEasy.IHideObjectMembers { }
    public interface IAnyCallConfigurationWithVoidReturnType : FakeItEasy.Configuration.IArgumentValidationConfiguration<FakeItEasy.Configuration.IVoidConfiguration>, FakeItEasy.Configuration.IAssertConfiguration, FakeItEasy.Configuration.ICallBaseConfiguration<FakeItEasy.Configuration.IVoidConfiguration>, FakeItEasy.Configuration.ICallbackConfiguration<FakeItEasy.Configuration.IVoidConfiguration>, FakeItEasy.Configuration.IDoNothingConfiguration<FakeItEasy.Configuration.IVoidConfiguration>, FakeItEasy.Configuration.IExceptionThrowerConfiguration<FakeItEasy.Configuration.IVoidConfiguration>, FakeItEasy.Configuration.IOutAndRefParametersConfiguration<FakeItEasy.Configuration.IVoidConfiguration>, FakeItEasy.Configuration.IVoidArgumentValidationConfiguration, FakeItEasy.Configuration.IVoidConfiguration, FakeItEasy.Configuration.IWhereConfiguration<FakeItEasy.Configuration.IAnyCallConfigurationWithVoidReturnType>, FakeItEasy.IHideObjectMembers { }
    public interface IArgumentValidationConfiguration<[System.Runtime.CompilerServices.NullableAttribute(2)]  out TInterface> : FakeItEasy.IHideObjectMembers
    {
        TInterface WhenArgumentsMatch(System.Func<FakeItEasy.Configuration.ArgumentCollection, bool> argumentsPredicate);
    }
    public interface IAssertConfiguration : FakeItEasy.IHideObjectMembers
    {
        FakeItEasy.Configuration.UnorderedCallAssertion MustHaveHappened(int numberOfTimes, FakeItEasy.Times timesOption);
        FakeItEasy.Configuration.UnorderedCallAssertion MustHaveHappenedANumberOfTimesMatching(System.Linq.Expressions.Expression<System.Func<int, bool>> predicate);
    }
    public interface IBehaviorLifetimeConfiguration<[System.Runtime.CompilerServices.NullableAttribute(2)]  out TInterface> : FakeItEasy.IHideObjectMembers
    {
        FakeItEasy.Configuration.IThenConfiguration<TInterface> NumberOfTimes(int numberOfTimes);
    }
    public interface ICallBaseConfiguration<[System.Runtime.CompilerServices.NullableAttribute(2)]  out TInterface> : FakeItEasy.IHideObjectMembers
    {
        FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<TInterface> CallsBaseMethod();
    }
    public interface ICallbackConfiguration<[System.Runtime.CompilerServices.NullableAttribute(2)]  out TInterface> : FakeItEasy.IHideObjectMembers
    {
        TInterface Invokes(System.Action<FakeItEasy.Core.IFakeObjectCall> action);
    }
    public interface IDoNothingConfiguration<[System.Runtime.CompilerServices.NullableAttribute(2)]  out TInterface> : FakeItEasy.IHideObjectMembers
    {
        FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<TInterface> DoesNothing();
    }
    public interface IExceptionThrowerConfiguration<[System.Runtime.CompilerServices.NullableAttribute(2)]  out TInterface> : FakeItEasy.IHideObjectMembers
    {
        FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<TInterface> Throws<T1>(System.Func<T1, System.Exception> exceptionFactory);
        FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<TInterface> Throws<T1, T2>(System.Func<T1, T2, System.Exception> exceptionFactory);
        FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<TInterface> Throws<T1, T2, T3>(System.Func<T1, T2, T3, System.Exception> exceptionFactory);
        FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<TInterface> Throws<T1, T2, T3, T4>(System.Func<T1, T2, T3, T4, System.Exception> exceptionFactory);
        FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<TInterface> Throws<T1, T2, T3, T4, T5>(System.Func<T1, T2, T3, T4, T5, System.Exception> exceptionFactory);
        FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<TInterface> Throws<T1, T2, T3, T4, T5, T6>(System.Func<T1, T2, T3, T4, T5, T6, System.Exception> exceptionFactory);
        FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<TInterface> Throws<T1, T2, T3, T4, T5, T6, T7>(System.Func<T1, T2, T3, T4, T5, T6, T7, System.Exception> exceptionFactory);
        FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<TInterface> Throws<T1, T2, T3, T4, T5, T6, T7, T8>(System.Func<T1, T2, T3, T4, T5, T6, T7, T8, System.Exception> exceptionFactory);
        FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<TInterface> Throws(System.Func<FakeItEasy.Core.IFakeObjectCall, System.Exception> exceptionFactory);
        FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<TInterface> Throws<[System.Runtime.CompilerServices.NullableAttribute(0)]  T>()
            where T : System.Exception, new ();
    }
    public interface IOrderableCallAssertion : FakeItEasy.IHideObjectMembers
    {
        FakeItEasy.Configuration.IOrderableCallAssertion Then(FakeItEasy.Configuration.UnorderedCallAssertion nextAssertion);
    }
    public interface IOutAndRefParametersConfiguration<out TInterface> : FakeItEasy.IHideObjectMembers
    {
        FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<TInterface> AssignsOutAndRefParametersLazily([System.Runtime.CompilerServices.NullableAttribute(new byte[] {
                1,
                1,
                1,
                2})] System.Func<FakeItEasy.Core.IFakeObjectCall, System.Collections.Generic.ICollection<object>> valueProducer);
        FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<TInterface> AssignsOutAndRefParametersLazily<[System.Runtime.CompilerServices.NullableAttribute(2)]  T1>([System.Runtime.CompilerServices.NullableAttribute(new byte[] {
                1,
                1,
                1,
                2})] System.Func<T1, object[]> valueProducer);
        [return: System.Runtime.CompilerServices.NullableAttribute(1)]
        FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<TInterface> AssignsOutAndRefParametersLazily<T1, T2>([System.Runtime.CompilerServices.NullableAttribute(new byte[] {
                1,
                1,
                1,
                1,
                2})] System.Func<T1, T2, object[]> valueProducer);
        [return: System.Runtime.CompilerServices.NullableAttribute(1)]
        FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<TInterface> AssignsOutAndRefParametersLazily<T1, T2, T3>([System.Runtime.CompilerServices.NullableAttribute(new byte[] {
                1,
                1,
                1,
                1,
                1,
                2})] System.Func<T1, T2, T3, object[]> valueProducer);
        [return: System.Runtime.CompilerServices.NullableAttribute(1)]
        FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<TInterface> AssignsOutAndRefParametersLazily<T1, T2, T3, T4>([System.Runtime.CompilerServices.NullableAttribute(new byte[] {
                1,
                1,
                1,
                1,
                1,
                1,
                2})] System.Func<T1, T2, T3, T4, object[]> valueProducer);
        [return: System.Runtime.CompilerServices.NullableAttribute(1)]
        FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<TInterface> AssignsOutAndRefParametersLazily<T1, T2, T3, T4, T5>([System.Runtime.CompilerServices.NullableAttribute(new byte[] {
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2})] System.Func<T1, T2, T3, T4, T5, object[]> valueProducer);
        [return: System.Runtime.CompilerServices.NullableAttribute(1)]
        FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<TInterface> AssignsOutAndRefParametersLazily<T1, T2, T3, T4, T5, T6>([System.Runtime.CompilerServices.NullableAttribute(new byte[] {
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2})] System.Func<T1, T2, T3, T4, T5, T6, object[]> valueProducer);
        [return: System.Runtime.CompilerServices.NullableAttribute(1)]
        FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<TInterface> AssignsOutAndRefParametersLazily<T1, T2, T3, T4, T5, T6, T7>([System.Runtime.CompilerServices.NullableAttribute(new byte[] {
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2})] System.Func<T1, T2, T3, T4, T5, T6, T7, object[]> valueProducer);
        [return: System.Runtime.CompilerServices.NullableAttribute(1)]
        FakeItEasy.Configuration.IAfterCallConfiguredConfiguration<TInterface> AssignsOutAndRefParametersLazily<T1, T2, T3, T4, T5, T6, T7, T8>([System.Runtime.CompilerServices.NullableAttribute(new byte[] {
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2})] System.Func<T1, T2, T3, T4, T5, T6, T7, T8, object[]> valueProducer);
    }
    public interface IPropertySetterAnyValueConfiguration<[System.Runtime.CompilerServices.NullableAttribute(2)]  TValue> : FakeItEasy.Configuration.IArgumentValidationConfiguration<FakeItEasy.Configuration.IPropertySetterConfiguration>, FakeItEasy.Configuration.IAssertConfiguration, FakeItEasy.Configuration.ICallBaseConfiguration<FakeItEasy.Configuration.IPropertySetterConfiguration>, FakeItEasy.Configuration.ICallbackConfiguration<FakeItEasy.Configuration.IPropertySetterConfiguration>, FakeItEasy.Configuration.IDoNothingConfiguration<FakeItEasy.Configuration.IPropertySetterConfiguration>, FakeItEasy.Configuration.IExceptionThrowerConfiguration<FakeItEasy.Configuration.IPropertySetterConfiguration>, FakeItEasy.Configuration.IPropertySetterConfiguration, FakeItEasy.IHideObjectMembers
    {
        FakeItEasy.Configuration.IPropertySetterConfiguration To(TValue value);
        FakeItEasy.Configuration.IPropertySetterConfiguration To(System.Linq.Expressions.Expression<System.Func<TValue>> valueConstraint);
    }
    public interface IPropertySetterConfiguration : FakeItEasy.Configuration.IAssertConfiguration, FakeItEasy.Configuration.ICallBaseConfiguration<FakeItEasy.Configuration.IPropertySetterConfiguration>, FakeItEasy.Configuration.ICallbackConfiguration<FakeItEasy.Configuration.IPropertySetterConfiguration>, FakeItEasy.Configuration.IDoNothingConfiguration<FakeItEasy.Configuration.IPropertySetterConfiguration>, FakeItEasy.Configuration.IExceptionThrowerConfiguration<FakeItEasy.Configuration.IPropertySetterConfiguration>, FakeItEasy.IHideObjectMembers { }
    public interface IReturnValueArgumentValidationConfiguration<[System.Runtime.CompilerServices.NullableAttribute(2)]  TMember> : FakeItEasy.Configuration.IArgumentValidationConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<TMember>>, FakeItEasy.Configuration.IAssertConfiguration, FakeItEasy.Configuration.ICallBaseConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<TMember>>, FakeItEasy.Configuration.ICallbackConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<TMember>>, FakeItEasy.Configuration.IExceptionThrowerConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<TMember>>, FakeItEasy.Configuration.IOutAndRefParametersConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<TMember>>, FakeItEasy.Configuration.IReturnValueConfiguration<TMember>, FakeItEasy.IHideObjectMembers { }
    public interface IReturnValueConfiguration<[System.Runtime.CompilerServices.NullableAttribute(2)]  TMember> : FakeItEasy.Configuration.IAssertConfiguration, FakeItEasy.Configuration.ICallBaseConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<TMember>>, FakeItEasy.Configuration.ICallbackConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<TMember>>, FakeItEasy.Configuration.IExceptionThrowerConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<TMember>>, FakeItEasy.Configuration.IOutAndRefParametersConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<TMember>>, FakeItEasy.IHideObjectMembers
    {
        FakeItEasy.Configuration.IAfterCallConfiguredWithOutAndRefParametersConfiguration<FakeItEasy.Configuration.IReturnValueConfiguration<TMember>> ReturnsLazily(System.Func<FakeItEasy.Core.IFakeObjectCall, TMember> valueProducer);
    }
    public interface IThenConfiguration<[System.Runtime.CompilerServices.NullableAttribute(2)]  out TInterface> : FakeItEasy.IHideObjectMembers
    {
        TInterface Then { get; }
    }
    public interface IVoidArgumentValidationConfiguration : FakeItEasy.Configuration.IArgumentValidationConfiguration<FakeItEasy.Configuration.IVoidConfiguration>, FakeItEasy.Configuration.IAssertConfiguration, FakeItEasy.Configuration.ICallBaseConfiguration<FakeItEasy.Configuration.IVoidConfiguration>, FakeItEasy.Configuration.ICallbackConfiguration<FakeItEasy.Configuration.IVoidConfiguration>, FakeItEasy.Configuration.IDoNothingConfiguration<FakeItEasy.Configuration.IVoidConfiguration>, FakeItEasy.Configuration.IExceptionThrowerConfiguration<FakeItEasy.Configuration.IVoidConfiguration>, FakeItEasy.Configuration.IOutAndRefParametersConfiguration<FakeItEasy.Configuration.IVoidConfiguration>, FakeItEasy.Configuration.IVoidConfiguration, FakeItEasy.IHideObjectMembers { }
    public interface IVoidConfiguration : FakeItEasy.Configuration.IAssertConfiguration, FakeItEasy.Configuration.ICallBaseConfiguration<FakeItEasy.Configuration.IVoidConfiguration>, FakeItEasy.Configuration.ICallbackConfiguration<FakeItEasy.Configuration.IVoidConfiguration>, FakeItEasy.Configuration.IDoNothingConfiguration<FakeItEasy.Configuration.IVoidConfiguration>, FakeItEasy.Configuration.IExceptionThrowerConfiguration<FakeItEasy.Configuration.IVoidConfiguration>, FakeItEasy.Configuration.IOutAndRefParametersConfiguration<FakeItEasy.Configuration.IVoidConfiguration>, FakeItEasy.IHideObjectMembers { }
    public interface IWhereConfiguration<[System.Runtime.CompilerServices.NullableAttribute(2)]  out TInterface> : FakeItEasy.IHideObjectMembers
    {
        TInterface Where(System.Func<FakeItEasy.Core.IFakeObjectCall, bool> predicate, System.Action<FakeItEasy.IOutputWriter> descriptionWriter);
    }
    [System.Runtime.CompilerServices.NullableAttribute(0)]
    public sealed class UnorderedCallAssertion : FakeItEasy.Configuration.IOrderableCallAssertion, FakeItEasy.IHideObjectMembers
    {
        public FakeItEasy.Configuration.IOrderableCallAssertion Then(FakeItEasy.Configuration.UnorderedCallAssertion nextAssertion) { }
    }
}
namespace FakeItEasy.Core
{
    [System.Runtime.CompilerServices.NullableAttribute(0)]
    public class DummyCreationException : System.Exception
    {
        public DummyCreationException() { }
        public DummyCreationException(string message) { }
        public DummyCreationException(string message, System.Exception innerException) { }
    }
    [System.Runtime.CompilerServices.NullableAttribute(0)]
    public class FakeCreationException : System.Exception
    {
        public FakeCreationException() { }
        public FakeCreationException(string message) { }
        public FakeCreationException(string message, System.Exception innerException) { }
    }
    [System.Runtime.CompilerServices.NullableAttribute(0)]
    public class FakeManager
    {
        [System.Runtime.CompilerServices.NullableAttribute(2)]
        public string FakeObjectName { get; }
        public virtual System.Type FakeObjectType { get; }
        public virtual object Object { get; }
        public virtual System.Collections.Generic.IEnumerable<FakeItEasy.Core.IFakeObjectCallRule> Rules { get; }
        public void AddInterceptionListener(FakeItEasy.Core.IInterceptionListener listener) { }
        public virtual void AddRuleFirst(FakeItEasy.Core.IFakeObjectCallRule rule) { }
        public virtual void AddRuleLast(FakeItEasy.Core.IFakeObjectCallRule rule) { }
        public virtual void RemoveRule(FakeItEasy.Core.IFakeObjectCallRule rule) { }
    }
    public interface ICompletedFakeObjectCall : FakeItEasy.Core.IFakeObjectCall
    {
        FakeItEasy.Configuration.ArgumentCollection ArgumentsAfterCall { get; }
        [System.Runtime.CompilerServices.NullableAttribute(2)]
        object ReturnValue { get; }
    }
    public interface IFakeObjectCall
    {
        FakeItEasy.Configuration.ArgumentCollection Arguments { get; }
        object FakedObject { get; }
        System.Reflection.MethodInfo Method { get; }
    }
    public interface IFakeObjectCallRule
    {
        System.Nullable<int> NumberOfTimesToCall { get; }
        void Apply(FakeItEasy.Core.IInterceptedFakeObjectCall fakeObjectCall);
        bool IsApplicableTo(FakeItEasy.Core.IFakeObjectCall fakeObjectCall);
    }
    public interface IInterceptedFakeObjectCall : FakeItEasy.Core.IFakeObjectCall
    {
        void CallBaseMethod();
        void SetArgumentValue(int index, object value);
        void SetReturnValue(object value);
    }
    public interface IInterceptionListener
    {
        void OnAfterCallIntercepted(FakeItEasy.Core.ICompletedFakeObjectCall interceptedCall);
        void OnBeforeCallIntercepted(FakeItEasy.Core.IFakeObjectCall interceptedCall);
    }
    [System.Runtime.CompilerServices.NullableAttribute(0)]
    public class Raise<[System.Runtime.CompilerServices.NullableAttribute(2)]  TEventArgs>
    {
        public static System.EventHandler<TEventArgs> op_Implicit(FakeItEasy.Core.Raise<TEventArgs> raiser) { }
        public static System.EventHandler op_Implicit(FakeItEasy.Core.Raise<TEventArgs> raiser) { }
    }
}
namespace FakeItEasy.Creation
{
    public interface IFakeOptions : FakeItEasy.IHideObjectMembers
    {
        FakeItEasy.Creation.IFakeOptions ConfigureFake(System.Action<object> action);
        FakeItEasy.Creation.IFakeOptions Implements(System.Type interfaceType);
        FakeItEasy.Creation.IFakeOptions Implements<[System.Runtime.CompilerServices.NullableAttribute(2)]  TInterface>();
        FakeItEasy.Creation.IFakeOptions Named(string name);
        FakeItEasy.Creation.IFakeOptions WithArgumentsForConstructor([System.Runtime.CompilerServices.NullableAttribute(new byte[] {
                1,
                2})] System.Collections.Generic.IEnumerable<object> argumentsForConstructor);
        FakeItEasy.Creation.IFakeOptions WithArgumentsForConstructor<[System.Runtime.CompilerServices.NullableAttribute(2)]  TConstructor>(System.Linq.Expressions.Expression<System.Func<TConstructor>> constructorCall);
        FakeItEasy.Creation.IFakeOptions WithAttributes(params System.Linq.Expressions.Expression<>[] attributes);
        FakeItEasy.Creation.IFakeOptions Wrapping(object wrappedInstance);
    }
    public interface IFakeOptions<T> : FakeItEasy.IHideObjectMembers
        where T :  class
    {
        FakeItEasy.Creation.IFakeOptions<T> ConfigureFake(System.Action<T> action);
        FakeItEasy.Creation.IFakeOptions<T> Implements(System.Type interfaceType);
        FakeItEasy.Creation.IFakeOptions<T> Implements<[System.Runtime.CompilerServices.NullableAttribute(2)]  TInterface>();
        FakeItEasy.Creation.IFakeOptions<T> Named(string name);
        FakeItEasy.Creation.IFakeOptions<T> WithArgumentsForConstructor([System.Runtime.CompilerServices.NullableAttribute(new byte[] {
                1,
                2})] System.Collections.Generic.IEnumerable<object> argumentsForConstructor);
        FakeItEasy.Creation.IFakeOptions<T> WithArgumentsForConstructor(System.Linq.Expressions.Expression<System.Func<T>> constructorCall);
        FakeItEasy.Creation.IFakeOptions<T> WithAttributes(params System.Linq.Expressions.Expression<>[] attributes);
        FakeItEasy.Creation.IFakeOptions<T> Wrapping(T wrappedInstance);
    }
}
namespace FakeItEasy.Sdk
{
    [System.Runtime.CompilerServices.NullableAttribute(0)]
    public class static Create
    {
        [return: System.Runtime.CompilerServices.NullableAttribute(new byte[] {
                1,
                2})]
        public static System.Collections.Generic.IList<object> CollectionOfDummy(System.Type typeOfDummy, int numberOfDummies) { }
        public static System.Collections.Generic.IList<object> CollectionOfFake(System.Type typeOfFake, int numberOfFakes) { }
        public static System.Collections.Generic.IList<object> CollectionOfFake(System.Type typeOfFake, int numberOfFakes, System.Action<FakeItEasy.Creation.IFakeOptions> optionsBuilder) { }
        [return: System.Runtime.CompilerServices.NullableAttribute(2)]
        public static object Dummy(System.Type typeOfDummy) { }
        public static object Fake(System.Type typeOfFake) { }
        public static object Fake(System.Type typeOfFake, System.Action<FakeItEasy.Creation.IFakeOptions> optionsBuilder) { }
    }
}