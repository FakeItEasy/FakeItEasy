<?xml version="1.0" encoding="utf-8" ?>
<Project DefaultTargets="Distrib" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<!-- Based on script from http://autofac.org" -->
	<Import Project="Libraries\Build\MSBuild.Community.Tasks.targets" />
	<PropertyGroup>
		<!--
			 Primary configuration properties (override them via command line
			 if needed
		-->
		<BuildPath Condition="$(BuildPath)==''">Build</BuildPath>
		<Configuration Condition="$(Configuration)==''">Release</Configuration>
		<BuildFramework></BuildFramework>
		<AllowPartiallyTrustedCallers Condition="$(AllowPartiallyTrustedCallers)==''">true</AllowPartiallyTrustedCallers>
		<FxCopCmdPath Condition="$(FxCopCmdPath)==''">C:\Program Files (x86)\Microsoft FxCop 1.36\FxCopCmd.exe</FxCopCmdPath>
		<SnCmdPath Condition="$(SnCmdPath)==''">C:\Program Files (x86)\Microsoft SDKs\Windows\v7.0A\bin\sn.exe</SnCmdPath>
		<ILMergeCmdPath Condition="$(ILMergeCmdPath)==''">C:\Program Files (x86)\Microsoft\ILMerge\ILMerge.exe</ILMergeCmdPath>
		<SilverlightFrameworkDirectory Condition="'$(SilverlightFrameworkDirectory)' == ''">C:\Program Files (x86)\Microsoft Silverlight\4.0.60531.0</SilverlightFrameworkDirectory>
		<FrameworkDirectory Condition="'$(FrameworkDirectory)' == ''">C:\Windows\Microsoft.NET\Framework\v4.0.30319</FrameworkDirectory>
		<!--
			Derived configuration properties
		 -->
		<ArchiveDirectory Condition="$(ArchiveDirectory)==''">$(BuildPath)</ArchiveDirectory>
		<NuPackPackageDirectory Condition="$(NuPackPackageDirectory)==''">$(BuildPath)\Package</NuPackPackageDirectory>
		<BinariesPath>$(BuildPath)\Binaries</BinariesPath>
		<LicensePath>$(BuildPath)\License</LicensePath>
		<BinariesSource>Source\FakeItEasy\bin\$(Configuration)</BinariesSource>
		<BinariesSourceSilverlight>Source\FakeItEasy-SL\bin\$(Configuration)</BinariesSourceSilverlight>
		<ProjectName>$(MSBuildProjectName)</ProjectName>
	</PropertyGroup>
	<PropertyGroup>
		<FxCop_CriticalErrors>0</FxCop_CriticalErrors>
		<FxCop_Errors>0</FxCop_Errors>
		<FxCop_CriticalWarnings>0</FxCop_CriticalWarnings>
		<FxCop_Warnings>0</FxCop_Warnings>
		<FxCop_TotalErrors>0</FxCop_TotalErrors>
		<FxCopOutput>$(BuildPath)\Artifacts\FxCop.xml</FxCopOutput>
	</PropertyGroup>

	<!-- 
	 Solution redirects. Every VS project normally knows how to support these targets
	-->
	<Target Name="Build">
		<MSBuild Projects="Source\$(ProjectName).sln" Targets="Build" Properties="Configuration=$(Configuration)$(BuildFramework);BuildConstants=$(BuildConstants);MSBuildTargets=$(BuildTargets)"/>
	</Target>

	<Target Name="Clean">
		<MSBuild Projects="Source\$(ProjectName).sln" Targets="Clean" Properties="Configuration=$(Configuration)$(BuildFramework);BuildConstants=$(BuildConstants);MSBuildTargets=$(BuildTargets)" />

		<CreateItem Include="**/Debug/**/*.*;**/Release/**/*.*">
			<Output ItemName="_binaryFiles" TaskParameter="Include"/>
		</CreateItem>
		<Delete Files="@(_binaryFiles)" TreatErrorsAsWarnings="true"/>
		<RemoveDir Directories="$(BuildPath)" />
	</Target>

	<Target Name="Rebuild" DependsOnTargets="UpdateVersion;Clean;Build;" />
	
	<Target Name="CreateVersionNumber" Condition="$(VersionNumber)==''">
		<Version VersionFile=".\Resources\Build\VersionNumber.txt" BuildType="Automatic" RevisionType="Increment" >
			<Output TaskParameter="Major" PropertyName="Major" />
			<Output TaskParameter="Minor" PropertyName="Minor" />
			<Output TaskParameter="Build" PropertyName="Build" />
			<Output TaskParameter="Revision" PropertyName="Revision" />
		</Version>
		<CreateProperty Value="$(Major).$(Minor).$(Build).$(Revision)">
			<Output TaskParameter="Value" PropertyName="VersionNumber" />
		</CreateProperty>
	</Target>
	
	<Target Name="UpdateVersion" DependsOnTargets="CreateVersionNumber">
		<CreateItem Include="**\SharedAssemblyInfo.cs">
			<Output ItemName="UpdateVersionPaths" TaskParameter="Include"/>
		</CreateItem>
		<CreateItem Include="@(UpdateVersionPaths->'%(SubFolder)%(RecursiveDir)VersionAssemblyInfo.cs')">
			<Output ItemName="UpdateVersionFiles" TaskParameter="Include"/>
		</CreateItem>
		<Time Format="u">
			<Output TaskParameter="FormattedTime" PropertyName="BuildTime" />
		</Time>
		
		<AssemblyInfo OutputFile="%(UpdateVersionFiles.FullPath)" CodeLanguage="CS"
			AssemblyVersion="$(VersionNumber)"
			AssemblyFileVersion="$(VersionNumber)"
			AssemblyConfiguration="$(Configuration) built on $(BuildTime)" 
		/>
	</Target>
	
	<Target Name="WipeResources">
		<!--Wipe old version files-->
		<CreateItem Include="**\VersionAssemblyInfo.cs">
			<Output ItemName="UpdateVersionPaths" TaskParameter="Include"/>
		</CreateItem>
		<Delete Files="@(UpdateVersionPaths)" />
	</Target>
	
	<!--
	 Copies built items to the distrib directory
	 -->
	<Target Name="Merge" DependsOnTargets="Build">
		<MakeDir Directories="$(BuildPath);"/>
		<MakeDir Directories="$(BinariesPath)\UnMerged;" />
		<MakeDir Directories="$(BinariesPath)\Merged" />
		
		<!--Libraries-->
		<CreateItem Include="$(BinariesSource)\*.*;">
			<Output ItemName="unmergedFiles" TaskParameter="Include"/>
		</CreateItem>
		
		<!--Licenses-->
		<CreateItem Include="*License.txt">
			<Output ItemName="licenseFiles" TaskParameter="Include"/>
		</CreateItem>
		
		<Copy SourceFiles="@(licenseFiles)" DestinationFolder="$(LicensePath)" />
		<Copy SourceFiles="@(unmergedFiles)" DestinationFolder="$(BinariesPath)\UnMerged" />
		
		<CreateItem Include="$(BinariesPath)\UnMerged\FakeItEasy.dll;$(BinariesPath)\UnMerged\Castle.Core.dll">
			<Output ItemName="binariesToMerge" TaskParameter="Include"/>
		</CreateItem>
		
		<Exec Command="&quot;$(ILMergeCmdPath)&quot; /out:&quot;$(BinariesPath)\Merged\$(ProjectName).dll&quot; /delaysign /targetplatform:&quot;v4,$(FrameworkDirectory)&quot; /keyfile:&quot;Source\FakeItEasy\FakeItEasy.snk&quot; @(binariesToMerge, ' ')"/>
		<Exec Command="&quot;$(SnCmdPath)&quot; -R &quot;$(BinariesPath)\Merged\FakeIteasy.dll&quot; &quot;Source\FakeItEasy\FakeItEasy.snk&quot;" />
		
		<Copy SourceFiles="$(BinariesPath)\UnMerged\FakeItEasy.xml" DestinationFolder="$(BinariesPath)\Merged" />
		
		<CreateItem Include="$(BinariesPath)\**\*.pdb;">
			<Output ItemName="pdbFiles" TaskParameter="Include" />
		</CreateItem>
		
		<Delete Files="@(pdbFiles)" />
	</Target>
	
	<Target Name="Merge-SL" DependsOnTargets="Build">
		<!--MakeDir Directories="$(BuildPath);"/-->
		<MakeDir Directories="$(BinariesPath)\UnMerged-SL;" />
		<MakeDir Directories="$(BinariesPath)\Merged-SL" />
		
		<!--Libraries-->
		<CreateItem Include="$(BinariesSourceSilverlight)\*.*;">
			<Output ItemName="unmergedFiles-SL" TaskParameter="Include"/>
		</CreateItem>
		
		<Copy SourceFiles="@(unmergedFiles-SL)" DestinationFolder="$(BinariesPath)\UnMerged-SL" />
		
		<CreateItem Include="$(BinariesPath)\UnMerged-SL\FakeItEasy-SL.dll;$(BinariesPath)\UnMerged-SL\Castle.Core.dll">
			<Output ItemName="binariesToMerge-SL" TaskParameter="Include"/>
		</CreateItem>
		
		<Exec Command="&quot;$(ILMergeCmdPath)&quot; /out:&quot;$(BinariesPath)\Merged-SL\FakeItEasy-SL.dll&quot; /delaysign /targetplatform:&quot;v4,$(SilverlightFrameworkDirectory)&quot; /lib:&quot;$(SilverlightFrameworkDirectory)&quot; /keyfile:&quot;Source\FakeItEasy\FakeItEasy.snk&quot; @(binariesToMerge-SL, ' ')"/>
		<!--Exec Command="&quot;$..\..\..\References\Ilmerge.exe&quot; /ndebug /targetplatform:v4,&quot;$(SilverlightFrameworkDirectory)&quot; /internalize:&quot;$..\..\ILMergeInclude.txt&quot; /keyfile:&quot;$..\..\..\References\StrongName.pfx&quot; /out:&quot;@(MainAssembly)&quot; &quot;@(IntermediateAssembly)&quot; @(IlmergeAssemblies->'&quot;%(FullPath)&quot;', ' ')" /-->
		<Exec Command="&quot;$(SnCmdPath)&quot; -R &quot;$(BinariesPath)\Merged-SL\FakeIteasy-SL.dll&quot; &quot;Source\FakeItEasy\FakeItEasy.snk&quot;" />
		
		<!--<Copy SourceFiles="$(BinariesPath)\UnMerged-SL\FakeItEasy-SL.xml" DestinationFolder="$(BinariesPath)\Merged-SL" />-->
		
		<CreateItem Include="$(BinariesPath)\**\*.pdb;">
			<Output ItemName="pdbFiles" TaskParameter="Include" />
		</CreateItem>
		
		<Delete Files="@(pdbFiles)" />
	</Target>
	
	<Target Name="BuildDebug">
		<MSBuild Projects="Source\$(ProjectName).sln" Targets="Build" Properties="Configuration=Debug$(BuildFramework);BuildConstants=$(BuildConstants);MSBuildTargets=$(BuildTargets)"/>
	</Target>
	
	<Target Name="CodeAnalysis" DependsOnTargets="BuildDebug">
		<MakeDir Directories="$(BuildPath)\Artifacts" />
		<Exec 
			Command="&quot;$(FxCopCmdPath)&quot; /searchgac /file:Source\FakeItEasy\bin\Debug\FakeItEasy.dll /out:$(FxCopOutput)" 
			ContinueOnError="True" />
			
		<XmlRead ContinueOnError="True"
			XmlFileName="$(FxCopOutput)"
			XPath="string(count(//Issue[@Level='CriticalError']))">
			<Output TaskParameter="Value" PropertyName="FxCop_CriticalErrors" />
		</XmlRead>
		<XmlRead ContinueOnError="True"
			XmlFileName="$(FxCopOutput)"
			XPath="string(count(//Issue[@Level='Error']))">
			<Output TaskParameter="Value" PropertyName="FxCop_Errors" />
		</XmlRead>
		<XmlRead ContinueOnError="True"
			XmlFileName="$(FxCopOutput)"
			XPath="string(count(//Issue[@Level='CriticalWarning']))">
			<Output TaskParameter="Value" PropertyName="FxCop_CriticalWarnings" />
		</XmlRead>
		<XmlRead ContinueOnError="True"
			XmlFileName="$(FxCopOutput)"
			XPath="string(count(//Issue[@Level='Warning']))">
			<Output TaskParameter="Value" PropertyName="FxCop_Warnings" />
		</XmlRead>
		<XmlRead ContinueOnError="True"
			XmlFileName="$(FxCopOutput)"
			XPath="string(count(//Issue))">
			<Output TaskParameter="Value" PropertyName="FxCop_TotalErrors" />
		</XmlRead>

		<Warning Text="FxCop encountered $(FxCop_TotalErrors) rule violations"
				Condition="$(FxCop_TotalErrors) &gt; 0" />

		<Error Text="FxCop encountered $(FxCop_TotalErrors) rule violations"
				Condition="$(FxCop_TotalErrors) &gt; 0" />
	</Target>
	
	<Target Name="Package" DependsOnTargets="Clean;Rebuild;Merge">
		<MakeDir Directories="$(NuPackPackageDirectory)\$(VersionNumber)\lib" />
		<MakeDir Directories="$(NuPackPackageDirectory)\$(VersionNumber)\lib\NET40" />
		<MakeDir Directories="$(NuPackPackageDirectory)\$(VersionNumber)\lib\SL4" />
		
		<CreateItem Include="$(BinariesPath)\UnMerged\FakeItEasy.*;">
			<Output ItemName="fakeItEasyLibFiles" TaskParameter="Include"/>
		</CreateItem>
		
		<CreateItem Include="$(BinariesPath)\UnMerged-SL\FakeItEasy-SL.*;">
			<Output ItemName="fakeItEasyLibFiles-SL" TaskParameter="Include"/>
		</CreateItem>
		
		<Copy SourceFiles="@(fakeItEasyLibFiles)" DestinationFolder="$(NuPackPackageDirectory)\$(VersionNumber)\lib\NET40" />
		<Copy SourceFiles="@(fakeItEasyLibFiles-SL)" DestinationFolder="$(NuPackPackageDirectory)\$(VersionNumber)\lib\SL4" />
		<Copy SourceFiles=".\Resources\Build\FakeItEasy.nuspec" DestinationFolder="$(NuPackPackageDirectory)\$(VersionNumber)" />
		
		<!-- Update version number in NuPack file -->
		<XmlUpdate XmlFileName="$(NuPackPackageDirectory)\$(VersionNumber)\FakeItEasy.nuspec" Xpath="/package/metadata/version"  Value="$(VersionNumber)" />
		
		<!-- Create package file -->
		<Exec 
			Command=".\Source\.nuget\NuGet.exe pack $(NuPackPackageDirectory)\$(VersionNumber)\FakeItEasy.nuspec /o .\Build\Package\" 
			ContinueOnError="False" />
	</Target>	
	
	<Target Name="Distrib" DependsOnTargets="Clean;CodeAnalysis;ReBuild;Merge;Merge-SL;Package">
		<MakeDir Directories="$(ArchiveDirectory)" />

		<!-- Archive-->
		<CreateItem Include="$(BinariesPath)\Merged\*.*;$(BinariesPath)\Merged-SL\*.*;;$(LicensePath)\*.*">
			<Output ItemName="archiveFiles" TaskParameter="Include" />
		</CreateItem>

		<Zip Files="@(archiveFiles)" ZipFileName="$(ArchiveDirectory)\$(ProjectName)-$(VersionNumber).zip" Flatten="true" WorkingDirectory="$(BuildPath)" />
	</Target>
</Project>
